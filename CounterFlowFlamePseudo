"""
---------------------------------------
One Dimensional Counter Flow Flame PSEUDOCODE
---------------------------------------

"""

import numpy as np
import matplotlib.pyplot as plt
import cantera as ct

#----- Initial Variables -----#
# Dimensions
L                           # meters, length L for the distance between the two walls
n                           # number of cells/nodes between the walls
dx                          # length of cell
r                           # radius of flow

# Time
t_final                     # seconds, final time
dt                          # time step

# Temperature
T0                          # initial temperature of mixing region
T0_fuel                     # initial temperature of fuel
T0_oxidizer                 # initial temperature of oxidizer

# Velocity
u0_fuel                     # initial velocity of fuel
u0_oxidizer                 # initial velocity of oxidizer
F0_fuel = 0.5*(u0_fuel * rho0_fuel)                 # initial axial velocity term of fuel
F0_oxidizer = 0.5*(u0_oxidizer * rho0_oxidizer)     # initial axial velocity term of oxidizer
G0_fuel = 0                                         # initial radial velocity term of fuel
G0_oxidizer = 0                                     # initial radial velocity term of oxidizer

# Density
rho                         # density of mixture
rho0_fuel                   # initial density of fuel       
rho0_oxidizer               # initial density of oxidizer 

# Dependent Variables
Y                           # vector of species concentration, rows = cells; columns = species
T                           # temperature vector
G                           # radial velocity vector

# Other Dependent Variables
n_species                   # number of species
X                           # vector of mass fraction
F                           # axial velocity vector
H                           # radial momentum vector
rho                         # total density vector
V_diffusion                 # vector of diffusion velocity of each species


#----- Constants -----#
mu                          # viscosity
Cp                          # heat capacity
lambda_diffusivity          # heat diffusivity
omega_dot                   # vector of molar production rate of each species
h                           # vector of enthalpy of each species
Wk                          # vector for W of each species
DTk                         # vector of thermal diffusion coefficients of each species

sum_h_omega_dot             # summation of all enthalpy multiplied with molar production rate of all species (for energy equation)
sum_Cp_Y_V                  # summation of all heat capacity multiplied with concentration and diffustion velocity of all species (for energy equation)
sum_Xj_Djk                  # summation of all mole fractions divided by the binary coefficient



#----- Derivative Vectors -----#
dTdt                        # temperature derivative vector
dYdt                        # species concentration derivative, 2D vector for each species
dGdt                        # radial velocity derivative vector



#----- Computation -----#
for i in range(0, len(t)):                      # time step loop
    for j in range(1, n-1):                     # variables of each node in i time step
        
        # Species conservation  
        for k in range(0, len(Yk)-1):           # loop for every species
            
            # Mixture Averaged Diffusion Coefficient
            D_km[k][j] = (1-Y[k][j])/sum_Xj_Djk
            # Diffusion Velocity
            V_diffusion[k][j] = -(1/X[k])*D_km*((X[k][j] - X[k][j-1])/dx) - DTk[k]/(rho[i]*Y[k])*(1/T[j])*((T[j] - T[j-1]/dx))
            # Species Conservation          
            dYdt[k][j] = (1/rho[i])*(omega_dot[k]*W[k] - F[j]*((Y[k][j] - Yk[k][j-1])/dx) - (rho[i] * Yk[k][j] * V_diffusion[k][j])/dx)
        
        # Continuity
        dGdt = -H[j] + ((F[j]*G[j])/rho[i])/dx - (2*G[j]^2)/rho[i] - (mu*(G[j]/rho[i])/dx)/dx

        # Energy
        dTdt[j] = (1/rho[i])*((-1/Cp)*sum_h_omega_dot - (rho/Cp)*(sum_Cp_Y_V)*((T[j] - T[j-1])/dx) + (1/Cp)*((-lambda_diffusivity*(T[j] - T[j-1]))/dx) + ((-lambda_diffusivity(T[j+1] - T[j]))/dx) - F[j]((T[j] - T[j-1])/dx))

        # Update Variables
        G[j] = G[j] + dGdt[j]*dt
        T[j] = T[j] + dTdt[j]*dt
        for k in range(1, len(Yk)):
            Yk[k][j] = Yk[k][j] + dYdt[k][j]*dt

        F[j+1] = F[j] + G[j]*dx
        # update rho[j]
        # update H[j]

    
        
        


